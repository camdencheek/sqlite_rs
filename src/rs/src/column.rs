use libc::c_char;

/*
** Information about each column of an SQL table is held in an instance
** of the Column structure, in the Table.aCol[] array.
**
** Definitions:
**
**   "table column index"     This is the index of the column in the
**                            Table.aCol[] array, and also the index of
**                            the column in the original CREATE TABLE stmt.
**
**   "storage column index"   This is the index of the column in the
**                            record BLOB generated by the OP_MakeRecord
**                            opcode.  The storage column index is less than
**                            or equal to the table column index.  It is
**                            equal if and only if there are no VIRTUAL
**                            columns to the left.
**
** Notes on zCnName:
** The zCnName field stores the name of the column, the datatype of the
** column, and the collating sequence for the column, in that order, all in
** a single allocation.  Each string is 0x00 terminated.  The datatype
** is only included if the COLFLAG_HASTYPE bit of colFlags is set and the
** collating sequence name is only included if the COLFLAG_HASCOLL bit is
** set.
*/
#[repr(C)]
pub struct Column {
    zCnName: *mut c_char, /* Name of this column */

    // TODO: merge notNull and eCType into a single 8-bit field
    notNull: u8, /* An OE_ code for handling a NOT NULL constraint */
    eCType: u8,  /* One of the standard types */

    affinity: c_char, /* One of the SQLITE_AFF_... values */
    szEst: u8,        /* Est size of value in this column. sizeof(INT)==1 */
    hName: u8,        /* Column name hash for faster lookup */
    iDflt: u16,       /* 1-based index of DEFAULT.  0 means "none" */
    colFlags: u16,    /* Boolean properties.  See COLFLAG_ defines below */
}
